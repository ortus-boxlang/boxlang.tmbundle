/**
 * BoxLang script to extract global BIFs and components from API documentation.
 * This script can be used to update the syntax file with new BIFs as they are added to BoxLang.
 *
 * Usage:
 *     boxlang extract-bifs.bxs
 */

 static.BASE_URL = "https://s3.amazonaws.com/apidocs.ortussolutions.com/boxlang/1.3.0/"

/**
 * Extract BIF names from BoxLang API documentation.
 *
 * @param baseUrl Base URL for the API documentation
 * @return Array of BIF names found in the documentation
 */
function extractBifsFromApiDocs( baseUrl = static.BASE_URL ) {
    var bifs = []

    // List of common BIF packages to check
    var packages = [
        "ortus/boxlang/runtime/bifs/global/array/",
        "ortus/boxlang/runtime/bifs/global/string/",
        "ortus/boxlang/runtime/bifs/global/math/",
        "ortus/boxlang/runtime/bifs/global/date/",
        "ortus/boxlang/runtime/bifs/global/decision/",
        "ortus/boxlang/runtime/bifs/global/conversion/",
        "ortus/boxlang/runtime/bifs/global/struct/",
        "ortus/boxlang/runtime/bifs/global/query/",
        "ortus/boxlang/runtime/bifs/global/system/",
        "ortus/boxlang/runtime/bifs/global/cache/",
        "ortus/boxlang/runtime/bifs/global/encryption/",
        "ortus/boxlang/runtime/bifs/global/xml/",
        "ortus/boxlang/runtime/bifs/global/zip/"
    ]

    println( "‚¨áÔ∏è Downloading BIFs from API documentation..." )

    for ( var package in packages ) {
        try {
            var url = arguments.baseUrl & package & "package-summary.html"
            println( "üì¶ Downloading: " & url )

            bx:http url="#url#" method="GET" result="httpResult" timeout="10" {
				headers = {
					"User-Agent" = "BoxLang BIF Extractor/1.0"
				}
			}

            if ( httpResult.statusCode == 200 ) {
                var content = httpResult.fileContent
                println( "Successfully fetched package: " & package.listLast( " /" ) )
                // Extract BIF names from HTML links in the class summary table
                // Pattern matches: <a href="BifName.html" title="class in ...">BifName</a>
                // Using REMatchNoCase and more flexible pattern for case variations
                var linkPattern = '<a\s+href="([A-Z][a-zA-Z0-9]*?)\.html"[^>]*title="[^"]*class\s+in[^"]*">([A-Z][a-zA-Z0-9]*?)</a>'
                var matches = REMatchNoCase( linkPattern, content )
                for ( var match in matches ) {
					//println( "  Processing match: " & match )
					var bifName = xmlParse( match.trim() ).xmlRoot.xmlText.trim()
					bifs.append( bifName )
					println( "  ‚úÖ Added BIF: " & bifName )
                }
            } else {
				println( "------------------------------------- ‚ö†Ô∏è ERROR --------------------------------------" )
				println( "Failed to fetch package: " & package & " - Status: " & httpResult.statusCode )
				println( "Response: " & httpResult.fileContent )
				println( "---------------------------------------------------------------------------------" )
			}

        } catch (any e) {
			println( "------------------------------------- ‚ö†Ô∏è ERROR --------------------------------------" )
            println( "Error processing " & package & ": " & e.message )
			println( e.stackTrace )
			println( "---------------------------------------------------------------------------------" )
            continue
        }
    }


    return bifs.sort( "textnocase" )
}

/**
 * Format BIF names for inclusion in the TextMate syntax file.
 *
 * @param bifs Array of BIF names
 * @return Formatted string for regex pattern
 */
function formatForSyntaxFile( required bifs ) {
    return ArrayToList( bifs, "|" );
}

/**
 * Main function to extract and display BIFs.
 */
function main() {
    println( "BoxLang BIF Extractor" );
    println( RepeatString("=", 40) );
    println( "" );

    // Extract BIFs from API docs
    var extractedBifs = extractBifsFromApiDocs();

    if ( !extractedBifs.isEmpty() ) {
        println( "‚ö°Found [#extractedBifs.len()#] potential BIFs:" );
        println( RepeatString( "-", 40) );

        // Save to file
        var fileContent = "## Extracted BIFs from BoxLang API Documentation" & Char(10);
        fileContent = fileContent & "## Total: " & extractedBifs.len() & " BIFs" & Char(10) & Char(10);

        for ( var bif in extractedBifs ) {
            fileContent = fileContent & bif & Char(10);
        }

        fileContent = fileContent & Char(10) & "## Formatted for syntax file:" & Char(10);
        fileContent = fileContent & formatForSyntaxFile( extractedBifs ) & Char(10);

        // Ensure we write to the Support directory
        var outputFile = "extracted-bifs.txt";
		println( "‚úçÔ∏è Saving results to: " & outputFile );
		if( fileExists( outputFile ) ) {
			FileDelete( outputFile );
		}
		filewrite( outputFile, fileContent );
    } else {
        println( "‚ö†Ô∏è No BIFs found. The API documentation structure may have changed." );
    }
}

// Execute the main function
main();